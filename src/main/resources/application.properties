server.port=8079
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://${DATABASE_HOST:localhost:3309}/${DATABASE_NAME:transacao}?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
spring.jpa.hibernate.ddl-auto=update
spring.datasource.initialization-mode=always
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

#feign config timeout
feign.client.config.cards.read-timeout=200
feign.client.config.cards.connect-timeout=200

# Transaction API
transaction.hostname=http://${TRANSACTION_HOST:localhost:7777}
transaction.request=/api/cartoes

# Proposta API
proposta.hostname=http://${PROPOSTA_HOST:localhost:8080}
proposta.request=/v1/cards

# Kafka ----
spring.kafka.bootstrap-servers=${KAFKAHOST:localhost:9092}
# Formato da chave (String) recebida!
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# Formato da mensagem \ evento (JSON) recebida(o)!
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# Identificador do grupo de consumo
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP_ID:minha-aplicacao}
# Modelo de coleta do consumidor (latest, earliest, none)
spring.kafka.consumer.auto-offset-reset=${KAFKA_AUTO-OFFSET-RESET:latest}
spring.kafka.topic.transactions=${KAFKA_TOPIC:transacoes}


## spring security resource server configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://${KEYCLOAK_HOST:localhost:18080}/auth/realms/${KEYCLOAK_REALM_NAME:proposta-cards}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://${KEYCLOAK_HOST:localhost:18080}/auth/realms/${KEYCLOAK_REALM_NAME:proposta-cards}/protocol/openid-connect/certs
